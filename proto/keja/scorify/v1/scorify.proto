syntax = "proto3";

package keja.scorify.v1;

import "keja/tenants/v1/tenants.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

enum GymnasticsEventType {
  GYMNASTICS_EVENT_TYPE_UNSPECIFIED = 0;
  GYMNASTICS_EVENT_TYPE_FLOOR_WARMUP = 1;
  GYMNASTICS_EVENT_TYPE_FLOOR_EXERCISE = 2;
  GYMNASTICS_EVENT_TYPE_UNEVEN_BARS = 3;
  GYMNASTICS_EVENT_TYPE_BALANCE_BEAM = 4;
  GYMNASTICS_EVENT_TYPE_VAULT = 5;
  GYMNASTICS_EVENT_TYPE_PARALLEL_BARS = 6;
  GYMNASTICS_EVENT_TYPE_HORIZONTAL_BAR = 7;
  GYMNASTICS_EVENT_TYPE_RINGS = 8;
  GYMNASTICS_EVENT_TYPE_POMMEL_HORSE = 9;
  GYMNASTICS_EVENT_TYPE_TRAMPOLINE = 10;
  GYMNASTICS_EVENT_TYPE_RYTHMIC_GYMNASTICS = 11;
  GYMNASTICS_EVENT_TYPE_ACROBATIC_GYMNASTICS = 12;
  GYMNASTICS_EVENT_TYPE_AEROBIC_GYMNASTICS = 13;
  GYMNASTICS_EVENT_TYPE_TUMBLING = 14;
  GYMNASTICS_EVENT_TYPE_BREAK = 15;
}

message GymnasticsEvent {
  string id = 1;
  keja.tenants.v1.Tenant tenant = 2;
  GymnasticsEventType event_type = 3;
  string event_name = 4;
  optional string event_description = 5;
  optional string event_code = 6; 
}

message GymnasticsEvents {
  repeated GymnasticsEvent gymnastics_events = 1;
}

enum StatusEnum {
  STATUS_ENUM_UNSPECIFIED = 0;
  STATUS_ENUM_ACTIVE = 1;
  STATUS_ENUM_ARCHIVED = 2;
}

message Status {
  Status status = 1;
} 

message Metadata {
  Status status = 1;
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
}

// A Stream could also be called a "Competition Series" or "Program"
// The end user can choose how they utilise this category
// Australian Clubs may like to use "WAG State", "WAG Nationals", "AGC", "Futures League" etc.
message Stream {
  string id = 1;
  keja.tenants.v1.Tenant tenant = 2;
  optional string stream_code = 3;
  string stream_name = 4; 
  Levels stream_levels = 5;
  Metadata metadata = 6;
}

message Streams {
  repeated Stream streams = 1;
}

// Each stream will contain multiple levels. For instance, a stream may contain levels 1-10, or levels 1-3.
message Level {
  string id = 1;
  keja.tenants.v1.Tenant tenant = 2;
  optional string level_code = 3;
  string level_name = 4;
  Metadata metadata = 5;
}

message Levels {
  repeated Level levels = 1;
}

// A club is a gymnastics club. A club may have many athletes, coaches, and judges.
message Club {
  string id = 1;
  keja.tenants.v1.Tenant tenant = 2;
  optional string club_code = 3;
  string club_name = 4;
  Metadata metadata = 5;
}

message Clubs {
  repeated Club clubs = 1;
}

// A person's name. This is used for athletes, coaches, and judges.
message PersonName {
  string first_name = 1;
  optional string last_name = 2;
}

// A person's contact details. This is used for athletes, coaches, and judges.
message PersonContactDetails {
  optional string email = 1;
  optional string phone_number = 2;
  optional string address = 3;
  Metadata metadata = 4;
}

// A judge is a person who is responsible for scoring the athletes.
// Judges can be associated to many (or none) clubs.
message Judge {
  string id = 1;
  keja.tenants.v1.Tenant tenant = 2;
  Clubs clubs = 3;
  PersonName judge_name = 4;
  PersonContactDetails contact_details = 5;
  Metadata metadata = 6;
}

message Judges {
  repeated Judge judges = 1;
}

// A coach is a person who is responsible for training the athletes.
message Coach {
  string id = 1;
  keja.tenants.v1.Tenant tenant = 2;
  Club club = 3;
  PersonName coach_name = 4;
  PersonContactDetails contact_details = 5;
  Metadata metadata = 6;
}

message Coaches {
  repeated Coach coaches = 1;
}

// An athlete is a person who competes in gymnastics.
message Athlete {
  string id = 1;
  keja.tenants.v1.Tenant tenant = 2;
  Club club = 3;
  optional string athlete_code = 4;
  PersonName athlete_name = 5;
  PersonContactDetails contact_details = 6;
  Levels athlete_levels = 7;
  Metadata metadata = 8;
}

message Athletes {
  repeated Athlete athletes = 1;
}

// A "Meet" is any competition or event where athletes compete.
message Meet {
  string id = 1;
  keja.tenants.v1.Tenant tenant = 2;
  string meet_name = 3;
  google.protobuf.Timestamp meet_start_date_time = 4;
  google.protobuf.Timestamp meet_end_date_time = 5;
  string meet_location = 6;
  Sessions meet_sessions = 7;
  Metadata metadata = 8;
}

message Meets {
  repeated Meet meets = 1;
}

// A Team is a group of athletes that compete together.
message Team {
  string id = 1;
  keja.tenants.v1.Tenant tenant = 2;
  string team_name = 3;
  Athletes team_athletes = 4;
  Metadata metadata = 5;
}

message Teams {
  repeated Team teams = 1;
}

// A Meet (or Competition) may have multiple sessions. Each session is comprised of multiple rotations.
message Session {
  string id = 1;
  keja.tenants.v1.Tenant tenant = 2;
  string session_name = 3;
  google.protobuf.Timestamp session_start_date_time = 4;
  google.protobuf.Timestamp session_end_date_time = 5;
  Rotations session_rotations = 6;
  Teams session_teams = 7;
  Metadata metadata = 8;
}

message Sessions {
  repeated Session meet_sessions = 1;
}

// Each session contains multiple rotations.
// A rotation is a list of events that athletes will compete in at that point in time.
// For instance Rotations One Gymnasts A, B & C are competing on floor, D, E & F are on bars, G, H & I are on beam, and J, K & L are on vault.
// The next rotation may have different athletes competing in different events.
message Rotation {
  string id = 1;
  keja.tenants.v1.Tenant tenant = 2;
  // Rotation Code is a unique identifier for a rotation within a session. It is printed on rotation reports.Athlete
  // Usual examples are a numeric identifier (i.e. 1, 2, 3, 4 for a 4-rotation session).
  // Client side apps may like to pre-fill this and hide it from the user (via way of a 'drag and drop' system).
  // However, it is not required to be a number, and rotations could be alphanumeric (i.e. A, B, C, D).
  string rotation_code = 3;
  // If further identification is required, a rotation name can be used. This is a human-readable name for the rotation.
  optional string rotation_name = 4;
  RotationEvents session_events = 5;
  Metadata metadata = 6;
}

message Rotations {
  repeated Rotation session_rotations = 1;
}

// A participant in a rotation. This could be an athlete or a team.
// Only one of the two fields should be populated.
message RotationParticipant {
  oneof participant {
    Team team = 1;
    Athlete athlete = 2;
  }
}

message RotationParticipants {
  repeated RotationParticipant rotation_participants = 1;
}

// An event is an apparatus which is being competed on. For instance, the Floor Exercise, Uneven Bars, Balance Beam, Vault, etc.
// Each rotation will usually have multiple events.
message RotationEvent {
  string id = 1;
  keja.tenants.v1.Tenant tenant = 2;
  GymnasticsEvent gymnastics_event = 5;
  RotationParticipants rotation_participants = 6;
  Metadata metadata = 7;
}

message RotationEvents {
  repeated RotationEvent rotation_events = 1;
}

// Competitions may use varying summing criteria to create an individual score
// For instance 'one go', average of two, best of two etc
message IndividualScoreCalculationType {
  string id = 1;
  keja.tenants.v1.Tenant tenant = 2;
  string calculation_type_name = 3;
  optional string calculation_type_description = 4;
}

message IndividualScoreCalculationTypes {
  repeated IndividualScoreCalculationType individual_score_calculation_types = 1;
}

// Competitions may use varying summing criteria to create a team score
// For instance, the sum of the top 3 scores, the sum of all scores, the sum of the top 2 scores, etc.
// This message defines the way that the team score is calculated.
message TeamScoreCalculationType {
  string id = 1;
  keja.tenants.v1.Tenant tenant = 2;
  string calculation_type_name = 3;
  optional string calculation_type_description = 4;
}

message TeamScoreCalculationTypes {
  repeated TeamScoreCalculationType team_score_calculation_types = 1;
}

// Score for an individual athlete for an event for an individual go
// For instance, if an athlete is competing on the vault, the score for that vault is recorded here.
// For competitions where an athlete has multiple attempts, multiple IndividualScore will be recorded.
// Some competitions may choose to calculate this by hand, and only input the final score.
message IndividualAttemptEventScore {
  string id = 1;
  keja.tenants.v1.Tenant tenant = 2;
  RotationEvent rotation_event = 3;
  Athlete athlete = 4;
  uint32 attempt_number = 5;
  Judge judge = 6;
  // The score value. This is a float value, and can be a decimal number.
  float score_value = 7;
  optional string score_notes = 8;
  Metadata metadata = 9;
}

message IndividualAttemptEventScores {
  repeated IndividualAttemptEventScore individual_attempt_event_scores = 1;
}


// This is the 'total' score for an individual athlete for an event.
// This takes into account multiple attempts, multiple judges, etc.
// For a one jude, one attempt competition, this will be the same as IndividualAttemptScore.
message IndividualEventScore {
  string id = 1;
  keja.tenants.v1.Tenant tenant = 2;
  RotationEvent rotation_event = 3;
  Athlete athlete = 4;
  // The score value. This is a float value, and can be a decimal number.
  float score_value = 5;
  IndividualScoreCalculationType score_calculation_type = 6;
  IndividualAttemptEventScores individual_attempt_event_scores = 7;
  Metadata metadata = 8;
}

message IndividualEventScores {
  repeated IndividualEventScore individual_event_scores = 1;
}

// If participants are competing as a team, the score for the team is recorded here.
// These are calculated from the IndividualEventScore for each athlete.
// The score is calculated based on the TeamScoreCalculationType.
message TeamEventScore {
  string id = 1;
  keja.tenants.v1.Tenant tenant = 2;
  RotationEvent rotation_event = 3;
  Team team = 4;
  // The score value. This is a float value, and can be a decimal number.
  float score_value = 5;
  optional string score_notes = 6;
  TeamScoreCalculationType score_calculation_type = 7;
  IndividualEventScores individual_event_scores = 8;
  Metadata metadata = 9;
}

message TeamEventScores {
  repeated TeamEventScore team_event_scores = 1;
}

// Request & Response Messages

// Helper Messages

// Options for filtering requests.
// Filter is currently opaque and a string, but may be expanded in the future.
// Treat as unstable.
message FilterRequestOptions {
  optional string filter = 1;
}

// Options for listing requests.
// Page token is currently opaque and a string, but may be expanded in the future.
// Treat as unstable.
message ListRequestOptions {
  google.protobuf.FieldMask field_mask = 1;
  optional string page_token = 2;
  optional FilterRequestOptions filter_request_options = 3;

}

// Options for general/individual requests.
message GeneralRequestOptions {
  google.protobuf.FieldMask field_mask = 1;
}

// Request a list of all athletes.

message GetAthleteListRequest {
  keja.tenants.v1.Tenant tenant = 1;
  ListRequestOptions list_request_options = 2;
}

// Response of all athletes.
message GetAthleteListResponse {
  Athletes athletes = 1;
}

// Request a single athlete.
message GetAthleteByIdRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string athlete_id = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single athlete.
message GetAthleteByIdResponse {
  Athlete athlete = 1;
}

// Update a single athlete.
message UpdateAthleteRequest {
  keja.tenants.v1.Tenant tenant = 1;
  Athlete athlete = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single athlete.
message UpdateAthleteResponse {
  Athlete athlete = 1;
}

// Create a single athlete.
message CreateAthleteRequest {
  keja.tenants.v1.Tenant tenant = 1;
  Athlete athlete = 2;
}

// Response of a single athlete.
message CreateAthleteResponse {
  Athlete athlete = 1;
}

// Delete a single athlete.
message DeleteAthleteRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string athlete_id = 2;
}

// Response of a single athlete.
message DeleteAthleteResponse {
  Athlete athlete = 1;
}

// Archive a single athlete.
message ArchiveAthleteRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string athlete_id = 2;
}

// Response of a single athlete.
message ArchiveAthleteResponse {
  Athlete athlete = 1;
}

// Request a list of all clubs.
message GetClubListRequest {
  keja.tenants.v1.Tenant tenant = 1;
  ListRequestOptions list_request_options = 2;
}

// Response of all clubs.
message GetClubListResponse {
  Clubs clubs = 1;
}

// Request a single club.
message GetClubByIdRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string club_id = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single club.
message GetClubByIdResponse {
  Club club = 1;
}

// Update a single club.
message UpdateClubRequest {
  keja.tenants.v1.Tenant tenant = 1;
  Club club = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single club.
message UpdateClubResponse {
  Club club = 1;
}

// Create a single club.
message CreateClubRequest {
  keja.tenants.v1.Tenant tenant = 1;
  Club club = 2;
}

// Response of a single club.
message CreateClubResponse {
  Club club = 1;
}

// Delete a single club.
message DeleteClubRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string club_id = 2;
}

// Response of a single club.
message DeleteClubResponse {
  Club club = 1;
}

// Archive a single club.
message ArchiveClubRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string club_id = 2;
}

// Response of a single club.
message ArchiveClubResponse {
  Club club = 1;
}

// Request a list of all coaches.
message GetCoachListRequest {
  keja.tenants.v1.Tenant tenant = 1;
  ListRequestOptions list_request_options = 2;
}

// Response of all coaches.
message GetCoachListResponse {
  Coaches coaches = 1;
}

// Request a single coach.
message GetCoachByIdRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string coach_id = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single coach.
message GetCoachByIdResponse {
  Coach coach = 1;
}

// Update a single coach.
message UpdateCoachRequest {
  keja.tenants.v1.Tenant tenant = 1;
  Coach coach = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single coach.
message UpdateCoachResponse {
  Coach coach = 1;
}

// Create a single coach.
message CreateCoachRequest {
  keja.tenants.v1.Tenant tenant = 1;
  Coach coach = 2;
}

// Response of a single coach.
message CreateCoachResponse {
  Coach coach = 1;
}

// Delete a single coach.
message DeleteCoachRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string coach_id = 2;
}

// Response of a single coach.
message DeleteCoachResponse {
  Coach coach = 1;
}

// Archive a single coach.
message ArchiveCoachRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string coach_id = 2;
}

// Response of a single coach.
message ArchiveCoachResponse {
  Coach coach = 1;
}

// Request a list of all gymnastics events.
message GetGymnasticsEventListRequest {
  keja.tenants.v1.Tenant tenant = 1;
  ListRequestOptions list_request_options = 2;
}

// Response of all gymnastics events.
message GetGymnasticsEventListResponse {
  GymnasticsEvents gymnastics_events = 1;
}

// Request a single gymnastics event.
message GetGymnasticsEventByIdRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string gymnastics_event_id = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single gymnastics event.
message GetGymnasticsEventByIdResponse {
  GymnasticsEvent gymnastics_event = 1;
}

// Update a single gymnastics event.
message UpdateGymnasticsEventRequest {
  keja.tenants.v1.Tenant tenant = 1;
  GymnasticsEvent gymnastics_event = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single gymnastics event.
message UpdateGymnasticsEventResponse {
  GymnasticsEvent gymnastics_event = 1;
}

// Create a single gymnastics event.
message CreateGymnasticsEventRequest {
  keja.tenants.v1.Tenant tenant = 1;
  GymnasticsEvent gymnastics_event = 2;
}

// Response of a single gymnastics event.
message CreateGymnasticsEventResponse {
  GymnasticsEvent gymnastics_event = 1;
}

// Delete a single gymnastics event.
message DeleteGymnasticsEventRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string gymnastics_event_id = 2;
}

// Response of a single gymnastics event.
message DeleteGymnasticsEventResponse {
  GymnasticsEvent gymnastics_event = 1;
}

// Archive a single gymnastics event.
message ArchiveGymnasticsEventRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string gymnastics_event_id = 2;
}

// Response of a single gymnastics event.
message ArchiveGymnasticsEventResponse {
  GymnasticsEvent gymnastics_event = 1;
}

// Request a list of all IndividualAttemptEventScores.
message GetIndividualAttemptEventScoreListRequest {
  keja.tenants.v1.Tenant tenant = 1;
  ListRequestOptions list_request_options = 2;
}

// Response of all IndividualAttemptEventScores.
message GetIndividualAttemptEventScoreListResponse {
  IndividualAttemptEventScores individual_attempt_event_scores = 1;
}

// Request a single IndividualAttemptEventScore.
message GetIndividualAttemptEventScoreByIdRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string individual_attempt_event_score_id = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single IndividualAttemptEventScore.
message GetIndividualAttemptEventScoreByIdResponse {
  IndividualAttemptEventScore individual_attempt_event_score = 1;
}

// Update a single IndividualAttemptEventScore.
message UpdateIndividualAttemptEventScoreRequest {
  keja.tenants.v1.Tenant tenant = 1;
  IndividualAttemptEventScore individual_attempt_event_score = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single IndividualAttemptEventScore.
message UpdateIndividualAttemptEventScoreResponse {
  IndividualAttemptEventScore individual_attempt_event_score = 1;
}

// Create a single IndividualAttemptEventScore.
message CreateIndividualAttemptEventScoreRequest {
  keja.tenants.v1.Tenant tenant = 1;
  IndividualAttemptEventScore individual_attempt_event_score = 2;
}

// Response of a single IndividualAttemptEventScore.
message CreateIndividualAttemptEventScoreResponse {
  IndividualAttemptEventScore individual_attempt_event_score = 1;
}

// Delete a single IndividualAttemptEventScore.
message DeleteIndividualAttemptEventScoreRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string individual_attempt_event_score_id = 2;
}

// Response of a single IndividualAttemptEventScore.
message DeleteIndividualAttemptEventScoreResponse {
  IndividualAttemptEventScore individual_attempt_event_score = 1;
}

// Archive a single IndividualAttemptEventScore.
message ArchiveIndividualAttemptEventScoreRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string individual_attempt_event_score_id = 2;
}

// Response of a single IndividualAttemptEventScore.
message ArchiveIndividualAttemptEventScoreResponse {
  IndividualAttemptEventScore individual_attempt_event_score = 1;
}

// Request a list of all IndividualEventScores.
message GetIndividualEventScoreListRequest {
  keja.tenants.v1.Tenant tenant = 1;
  ListRequestOptions list_request_options = 2;
}

// Response of all IndividualEventScores.
message GetIndividualEventScoreListResponse {
  IndividualEventScores individual_event_scores = 1;
}

// Request a single IndividualEventScore.
message GetIndividualEventScoreByIdRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string individual_event_score_id = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single IndividualEventScore.
message GetIndividualEventScoreByIdResponse {
  IndividualEventScore individual_event_score = 1;
}

// Request a list of all Judges.
message GetJudgeListRequest {
  keja.tenants.v1.Tenant tenant = 1;
  ListRequestOptions list_request_options = 2;
}

// Response of all Judges.
message GetJudgeListResponse {
  Judges judges = 1;
}

// Request a single Judge.
message GetJudgeByIdRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string judge_id = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single Judge.
message GetJudgeByIdResponse {
  Judge judge = 1;
}

// Update a single Judge.
message UpdateJudgeRequest {
  keja.tenants.v1.Tenant tenant = 1;
  Judge judge = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single Judge.
message UpdateJudgeResponse {
  Judge judge = 1;
}

// Create a single Judge.
message CreateJudgeRequest {
  keja.tenants.v1.Tenant tenant = 1;
  Judge judge = 2;
}

// Response of a single Judge.
message CreateJudgeResponse {
  Judge judge = 1;
}

// Delete a single Judge.
message DeleteJudgeRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string judge_id = 2;
}

// Response of a single Judge.
message DeleteJudgeResponse {
  Judge judge = 1;
}

// Archive a single Judge.
message ArchiveJudgeRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string judge_id = 2;
}

// Response of a single Judge.
message ArchiveJudgeResponse {
  Judge judge = 1;
}

// Request a list of all levels.
// Optionally, specify a stream to get levels for that stream.
message GetLevelListRequest {
  keja.tenants.v1.Tenant tenant = 1;
  ListRequestOptions list_request_options = 2;
  optional Stream stream = 3;
}

// Response of all levels.
message GetLevelListResponse {
  Levels levels = 1;
}

// Request a single level.
message GetLevelByIdRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string level_id = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single level.
message GetLevelByIdResponse {
  Level level = 1;
}

// Update a single level.
message UpdateLevelRequest {
  keja.tenants.v1.Tenant tenant = 1;
  Level level = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single level.
message UpdateLevelResponse {
  Level level = 1;
}

// Create a single level.
message CreateLevelRequest {
  keja.tenants.v1.Tenant tenant = 1;
  Level level = 2;
}

// Response of a single level.
message CreateLevelResponse {
  Level level = 1;
}

// Delete a single level.
message DeleteLevelRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string level_id = 2;
}

// Response of a single level.
message DeleteLevelResponse {
  Level level = 1;
}

// Archive a single level.
message ArchiveLevelRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string level_id = 2;
}

// Response of a single level.
message ArchiveLevelResponse {
  Level level = 1;
}

// Request a list of all meets (competitions).
message GetMeetListRequest {
  keja.tenants.v1.Tenant tenant = 1;
  ListRequestOptions list_request_options = 2;
}

// Response of all meets (competitions).
message GetMeetListResponse {
  Meets meets = 1;
}

// Request a single meet (competition).
message GetMeetByIdRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string meet_id = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single meet (competition).
message GetMeetByIdResponse {
  Meet meet = 1;
}

// Update a single meet (competition).
message UpdateMeetRequest {
  keja.tenants.v1.Tenant tenant = 1;
  Meet meet = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single meet (competition).
message UpdateMeetResponse {
  Meet meet = 1;
}

// Create a single meet (competition).
message CreateMeetRequest {
  keja.tenants.v1.Tenant tenant = 1;
  Meet meet = 2;
}

// Response of a single meet (competition).
message CreateMeetResponse {
  Meet meet = 1;
}

// Delete a single meet (competition).
message DeleteMeetRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string meet_id = 2;
}

// Response of a single meet (competition).
message DeleteMeetResponse {
  Meet meet = 1;
}

// Archive a single meet (competition).
message ArchiveMeetRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string meet_id = 2;
}

// Response of a single meet (competition).
message ArchiveMeetResponse {
  Meet meet = 1;
}

// Request a list of all RotationEvents.
message GetRotationEventListRequest {
  keja.tenants.v1.Tenant tenant = 1;
  ListRequestOptions list_request_options = 2;
}

// Response of all RotationEvents.
message GetRotationEventListResponse {
  RotationEvents rotation_events = 1;
}

// Request a single RotationEvent.
message GetRotationEventByIdRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string rotation_event_id = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single RotationEvent.
message GetRotationEventByIdResponse {
  RotationEvent rotation_event = 1;
}

// Update a single RotationEvent.
message UpdateRotationEventRequest {
  keja.tenants.v1.Tenant tenant = 1;
  RotationEvent rotation_event = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single RotationEvent.
message UpdateRotationEventResponse {
  RotationEvent rotation_event = 1;
}

// Create a single RotationEvent.
message CreateRotationEventRequest {
  keja.tenants.v1.Tenant tenant = 1;
  RotationEvent rotation_event = 2;
}

// Response of a single RotationEvent.
message CreateRotationEventResponse {
  RotationEvent rotation_event = 1;
}

// Delete a single RotationEvent.
message DeleteRotationEventRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string rotation_event_id = 2;
}

// Response of a single RotationEvent.
message DeleteRotationEventResponse {
  RotationEvent rotation_event = 1;
}

// Archive a single RotationEvent.
message ArchiveRotationEventRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string rotation_event_id = 2;
}

// Response of a single RotationEvent.
message ArchiveRotationEventResponse {
  RotationEvent rotation_event = 1;
}

// Request a list of all Rotations.
message GetRotationListRequest {
  keja.tenants.v1.Tenant tenant = 1;
  ListRequestOptions list_request_options = 2;
}

// Response of all Rotations.
message GetRotationListResponse {
  Rotations rotations = 1;
}

// Request a single Rotation.
message GetRotationByIdRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string rotation_id = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single Rotation.
message GetRotationByIdResponse {
  Rotation rotation = 1;
}

// Update a single Rotation.
message UpdateRotationRequest {
  keja.tenants.v1.Tenant tenant = 1;
  Rotation rotation = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single Rotation.
message UpdateRotationResponse {
  Rotation rotation = 1;
}

// Create a single Rotation.
message CreateRotationRequest {
  keja.tenants.v1.Tenant tenant = 1;
  Rotation rotation = 2;
}

// Response of a single Rotation.
message CreateRotationResponse {
  Rotation rotation = 1;
}

// Delete a single Rotation.
message DeleteRotationRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string rotation_id = 2;
}

// Response of a single Rotation.
message DeleteRotationResponse {
  Rotation rotation = 1;
}

// Archive a single Rotation.
message ArchiveRotationRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string rotation_id = 2;
}

// Response of a single Rotation.
message ArchiveRotationResponse {
  Rotation rotation = 1;
}

// Request a list of all sessions.
// Highly consider using ListRequestOptions to filter for a specific meet.
message GetSessionListRequest {
  keja.tenants.v1.Tenant tenant = 1;
  ListRequestOptions list_request_options = 3;
}

// Response of all sessions.
message GetSessionListResponse {
  Sessions sessions = 1;
}

// Request a single session.
message GetSessionByIdRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string session_id = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single session.
message GetSessionByIdResponse {
  Session session = 1;
}

// Update a single session.
message UpdateSessionRequest {
  keja.tenants.v1.Tenant tenant = 1;
  Session session = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single session.
message UpdateSessionResponse {
  Session session = 1;
}

// Create a single session.
message CreateSessionRequest {
  keja.tenants.v1.Tenant tenant = 1;
  Session session = 2;
}

// Response of a single session.
message CreateSessionResponse {
  Session session = 1;
}

// Delete a single session.
message DeleteSessionRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string session_id = 2;
}

// Response of a single session.
message DeleteSessionResponse {
  Session session = 1;
}

// Archive a single session.
message ArchiveSessionRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string session_id = 2;
}

// Response of a single session.
message ArchiveSessionResponse {
  Session session = 1;
}

// Request a list of all streams.
message GetStreamListRequest {
  keja.tenants.v1.Tenant tenant = 1;
  ListRequestOptions list_request_options = 2;
}

// Response of all streams.
message GetStreamListResponse {
  Streams streams = 1;
}

// Request a single stream.
message GetStreamByIdRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string stream_id = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single stream.
message GetStreamByIdResponse {
  Stream stream = 1;
}

// Update a single stream.
message UpdateStreamRequest {
  keja.tenants.v1.Tenant tenant = 1;
  Stream stream = 2;
  GeneralRequestOptions general_request_options = 3;
}

// Response of a single stream.
message UpdateStreamResponse {
  Stream stream = 1;
}

// Create a single stream.
message CreateStreamRequest {
  keja.tenants.v1.Tenant tenant = 1;
  Stream stream = 2;
}

// Response of a single stream.
message CreateStreamResponse {
  Stream stream = 1;
}

// Delete a single stream.
message DeleteStreamRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string stream_id = 2;
}

// Response of a single stream.
message DeleteStreamResponse {
  Stream stream = 1;
}

// Archive a single stream.
message ArchiveStreamRequest {
  keja.tenants.v1.Tenant tenant = 1;
  string stream_id = 2;
}

// Response of a single stream.
message ArchiveStreamResponse {
  Stream stream = 1;
}

// Request a list of all teams.
// Requires a meet to be specified.
// Optionally, specify a session to get teams for that session.
message GetTeamListRequest {
  keja.tenants.v1.Tenant tenant = 1;
  Meet meet = 2;
  ListRequestOptions list_request_options = 3;
  optional Session session = 4;
}

// Response of all teams.
message GetTeamListResponse {
  Teams teams = 1;
}

// Service

service CadenceScorifyService {
  rpc GetGymnasticsEventList (GetGymnasticsEventListRequest) returns (GetGymnasticsEventListResponse);
  rpc GetStreamList (GetStreamListRequest) returns (GetStreamListResponse);
}